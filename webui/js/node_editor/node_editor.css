/*
 * FlowEmu - Flow-Based Network Emulator
 * Copyright (c) 2021 Institute of Communication Networks (ComNets),
 *                    Hamburg University of Technology (TUHH),
 *                    https://www.tuhh.de/comnets
 * Copyright (c) 2021 Daniel Stolpmann <daniel.stolpmann@tuhh.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

.node_editor {
	position: relative;

	overflow: hidden;
}

.node_editor > svg {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	z-index: -1;

	background: rgb(50, 50, 50);
}

.node_editor > svg path {
	stroke: white;
	stroke-width: 2px;
	fill: none;
}

.node_library {
	width: 300px;
	height: 100%;

	background: rgb(25, 25, 25);

	overflow-y: auto;
}

.node_library .group > .header {
	height: 32px;
	line-height: 32px;
	padding: 0 8px;

	user-select: none;

	background: rgb(40, 40, 40);
	color: white;
}

.node_library .group > .content {
	min-height: 1px;
	overflow: hidden;
}

.node_library .group.collapsed > .content {
	height: 0;
}

.node_settings {
	width: 400px;
	height: 100%;

	background: rgb(25, 25, 25);

	overflow-y: auto;
}

.node {
	user-select: none;

	color: white;
	background: rgb(65, 65, 65);
	border-radius: 5px;
	box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.3);
}

.node_editor .node {
	position: absolute;
	width: 250px;
}

.node_library .node {
	width: calc(100% - 50px);
	margin: 25px;
}

.node.selected {
	box-shadow: 0px 0px 8px rgba(255, 165, 0, 0.5);
}

.node .header {
	width: 100%;
	padding: 0 8px;
	height: 28px;

	background: rgb(40, 40, 40);
	border-top-left-radius: 5px;
	border-top-right-radius: 5px;

	line-height: 28px;
}

.node .content {
	min-height: 8px;
}

.node .content li {
	padding: 4px 8px;
}

.node .content li:last-child {
	padding-bottom: 8px;
}

.node_library .node .content .label {
	display: none !important;
}

.node .content .parameter {
	display: flex;
	flex-direction: row;
	align-items: center;
}

.node .content .parameter .label {
	margin-right: 8px;
}

.node .content .parameter .label:empty {
	display: none;
}

.node .content .parameter input[type=text] {
	flex: 1 1 auto;
	width: 100%;

	height: 28px;
	line-height: 28px;
	border: none;

	background: rgb(75, 75, 75);
	color: white;

	text-align: center;
}

.node .content .parameter input[type=text]:focus {
	outline: none;
}

.node .content .parameter input[type=text].changed {
	background: rgb(100, 100, 100);
}

.node .content .parameter input[type=checkbox] {
	flex: 0 0 auto;
	margin-left: auto;

	line-height: 28px;
}

.node .content .parameter input[type=text].value_input_string {
	padding: 0 5px;
	border-radius: 3px;

	text-align: left;
}

.node .content .parameter select {
	flex: 1 1 auto;
	width: 100%;

	height: 28px;
	line-height: 28px;
	outline: none;
	border: none;

	padding: 0 2px;
	border-radius: 3px;

	background: rgb(75, 75, 75);
	color: white;
}

.node .content .parameter .step {
	flex: 1 0 auto;
	width: 20px;

	height: 28px;
	line-height: 28px;
	text-align: center;

	background: rgb(90, 90, 90);
}

.node .content .parameter .step:first-of-type {
	border-radius: 3px 0 0 3px;
}

.node .content .parameter .step:last-of-type {
	border-radius: 0 3px 3px 0;
}

.node .content .parameter .unit {
	margin-left: 8px;
}

.node .content .parameter .unit:empty {
	display: none;
}

.node .content .statistic {
	display: flex;
	flex-direction: row;
	align-items: center;
}

.node .content .statistic .label {
	margin-right: 8px;
}

.node .content .statistic .label:empty {
	display: none;
}

.node .content .statistic .value {
	margin-left: auto;
}

.node .content .statistic .unit {
	margin-left: 8px;
}

.node .content .statistic .unit:empty {
	display: none !important;
}

.node .content .flow {
	display: flex;
	padding: 4px 8px;
}

.node .content .flow > .center {
	flex-grow: 1;
}

.node .content .flow .port {
	height: 16px;
	width: 64px;
	padding: 0 4px;
	margin: 5px 0;

	line-height: 16px;
	font-size: 12px;
	font-weight: bold;
}

.node .content .flow > .left .port {
	transform: translate(-16px, 0);
	text-align: left;
}

.node .content .flow > .right .port {
	transform: translate(16px, 0);
	text-align: right;
}

.node .content .flow .port.sending {
	background: orange;
}

.node .content .flow > .left .port.sending::before {
	content: " ";
	position: absolute;
	left: -8px;

	border-top: 8px solid transparent;
	border-bottom: 8px solid transparent;
	border-right: 8px solid orange;
}

.node .content .flow > .right .port.sending::after {
	content: " ";
	position: absolute;
	right: -8px;

	border-top: 8px solid transparent;
	border-bottom: 8px solid transparent;
	border-left: 8px solid orange;
}

.node .content .flow .port.receiving {
	background: orange;
}

.node .content .flow > .left .port.receiving::before {
	content: " ";
	position: absolute;
	left: -8px;

	border-top: 8px solid orange;
	border-bottom: 8px solid orange;
	border-left: 8px solid transparent;
}

.node .content .flow > .right .port.receiving::after {
	content: " ";
	position: absolute;
	right: -8px;

	border-top: 8px solid orange;
	border-bottom: 8px solid orange;
	border-right: 8px solid transparent;
}

.node .content .flow .port.requesting {
	background: rebeccapurple;
}

.node .content .flow > .left .port.requesting::after {
	content: " ";
	position: absolute;
	left: -8px;

	width: 8px;
	height: 16px;
	background: rebeccapurple;
}

.node .content .flow > .right .port.requesting::after {
	content: " ";
	position: absolute;
	right: -8px;

	width: 8px;
	height: 16px;
	background: rebeccapurple;
}

.node .content .flow .port.responding {
	background: rebeccapurple;
}

.node .content .flow > .left .port.responding::after {
	content: " ";
	position: absolute;
	left: -8px;

	width: 8px;
	height: 16px;
	background: rebeccapurple;
	border-radius: 8px 0 0 8px;
}

.node .content .flow > .right .port.responding::after {
	content: " ";
	position: absolute;
	right: -8px;

	width: 8px;
	height: 16px;
	background: rebeccapurple;
	border-radius: 0 8px 8px 0;
}
